-- seed.sql
-- This file contains seed data for the local Supabase database

-- Create users with hashed passwords for local development
DO $$
DECLARE
  user1_id UUID := gen_random_uuid();
  user2_id UUID := gen_random_uuid();
  -- Using Supabase's default password hashing (bcrypt)
  -- These are bcrypt hashes for 'password123'
  password_hash TEXT := '$2a$10$Ot0Lk8xwcXGq1SQvQW7Xee3AaCQTvLBbGKc.6SM4w/XjFZ9Kj.ZYS';
BEGIN
  -- Insert users into auth.users
  INSERT INTO auth.users (
    id, 
    email,
    encrypted_password,
    email_confirmed_at,
    created_at, 
    updated_at,
    raw_app_meta_data,
    raw_user_meta_data
  )
  VALUES 
    (
      user1_id, 
      'user1@example.com',
      password_hash,
      NOW(),
      NOW(), 
      NOW(),
      '{"provider":"email","providers":["email"]}'::jsonb,
      '{"name":"Test User 1"}'::jsonb
    ),
    (
      user2_id, 
      'user2@example.com',
      password_hash,
      NOW(),
      NOW(), 
      NOW(),
      '{"provider":"email","providers":["email"]}'::jsonb,
      '{"name":"Test User 2"}'::jsonb
    )
  ON CONFLICT (id) DO NOTHING;
  
  -- Insert identities for the users (required for Supabase auth)
  INSERT INTO auth.identities (
    id,
    user_id,
    provider_id,
    identity_data,
    provider,
    created_at,
    updated_at
  )
  VALUES
    (
      user1_id,
      user1_id,
      user1_id,
      jsonb_build_object('sub', user1_id::text, 'email', 'user1@example.com'),
      'email',
      NOW(),
      NOW()
    ),
    (
      user2_id,
      user2_id,
      user2_id,
      jsonb_build_object('sub', user2_id::text, 'email', 'user2@example.com'),
      'email',
      NOW(),
      NOW()
    )
  ON CONFLICT (id) DO NOTHING;

  -- Insert sample decks
  -- The slug will be automatically generated by the trigger we created
  INSERT INTO public.decks (user_id, name, description)
  VALUES
    -- User 1's decks
    (user1_id, 'JavaScript Fundamentals', 'Core concepts of JavaScript programming'),
    (user1_id, 'React Hooks', 'All about React hooks and their usage'),
    (user1_id, 'CSS Grid & Flexbox', 'Modern CSS layout techniques'),
    
    -- User 2's decks
    (user2_id, 'TypeScript Basics', 'Introduction to TypeScript'),
    (user2_id, 'SQL Queries', 'Common SQL queries and patterns'),
    (user2_id, 'Git Commands', 'Essential Git commands for daily use')
  ON CONFLICT (user_id, name) DO NOTHING; -- Skip if deck with same name already exists for user

END $$;

-- Note: The slug field will be automatically populated by the trigger we created
-- The created_at and updated_at fields will be automatically set to NOW() 